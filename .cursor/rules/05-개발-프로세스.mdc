---
description: 
globs: 
alwaysApply: true
---
# 개발 프로세스

## 🔄 개발 워크플로우 개요

### 표준 개발 사이클
```
계획 → 구현 → 검증 → 문서화 → 배포
```

### 단계별 핵심 활동
| 단계 | 핵심 활동 | 산출물 | 담당자 |
|-----|-----|-----|-----|
| **계획** | 요구사항 분석, 작업 분리, 우선순위 설정 | 작업 계획서, todo.md | 모든 개발자 |
| **구현** | 코드 작성, 단위 테스트, 즉시 테스트 | 소스 코드, 테스트 코드 | 담당 개발자 |
| **검증** | 코드 리뷰, 통합 테스트, 품질 검사 | 테스트 결과, 리뷰 의견 | 모든 개발자 |
| **문서화** | 코드 주석, README 업데이트, Devlog 작성 | 기술 문서, 주석 | 담당 개발자 |
| **배포** | 빌드, 배포, 모니터링 | 배포된 애플리케이션 | 담당 개발자 |

## 📋 단계별 상세 프로세스

### 1. 계획 단계 (15분)

#### 작업 계획 템플릿
```markdown
# 작업 계획: [작업명]

## 목표
- [한 문장으로 작업 목표 정의]

## 작업 단위
1. [세부 작업 1] - 예상 시간: [시간]
2. [세부 작업 2] - 예상 시간: [시간]
3. [세부 작업 3] - 예상 시간: [시간]

## 테스트 계획
- [테스트 항목 1]
- [테스트 항목 2]

## 필요한 리소스
- [필요한 API, 라이브러리 등]
```

#### 작업 전 체크리스트
- [ ] 관련 문서 검토 (PRD, 디자인 가이드 등)
- [ ] 유사 작업 참고 (소요 시간, 발생 문제 등)
- [ ] 작업 범위 명확화 및 분리
- [ ] 필요한 리소스 확인 (API, 라이브러리 등)
- [ ] todo.md 파일에 작업 항목 추가

### 2. 구현 단계 (60-120분)

#### 구현 원칙
- **최소 단위로 기능 구현**: 파일별 작업
- **즉시 테스트 원칙**: 변경 후 바로 테스트
- **작은 단위로 커밋**: 기능별 커밋

#### 코딩 표준
- 일관된 코드 스타일 유지
- 의미 있는 변수/함수 이름 사용
- 한국어 주석 추가 (복잡한 로직)
- 코드 중복 최소화

#### 구현 체크리스트
- [ ] 필요한 컴포넌트/함수 정의
- [ ] 타입 정의 (TypeScript)
- [ ] 에러 처리 로직 구현
- [ ] 테스트 코드 작성
- [ ] 코드 포맷팅 및 린트 검사

### 3. 검증 단계 (30분)

#### 테스트 전략
- **단위 테스트**: 개별 함수/컴포넌트 테스트
- **통합 테스트**: 여러 컴포넌트 간 상호작용 테스트
- **E2E 테스트**: 사용자 시나리오 테스트

#### 코드 품질 검사
- ESLint를 통한 정적 분석
- Prettier를 통한 코드 포맷팅
- TypeScript 타입 검사

#### 검증 체크리스트
- [ ] 모든 테스트 통과 확인
- [ ] 코드 품질 검사 통과
- [ ] 브라우저 호환성 확인
- [ ] 반응형 디자인 확인
- [ ] 접근성 검사

### 4. 문서화 단계 (15-30분)

#### 문서화 대상
- 코드 주석
- README.md 업데이트
- Devlog.md 작업 내용 기록
- todo.md 작업 항목 체크

#### 문서화 템플릿 (Devlog)
```markdown
# 개발 로그: [날짜]

## 작업 내용
- [완료한 작업 1]
- [완료한 작업 2]

## 발생 문제 및 해결 방법
- **문제**: [문제 설명]
- **해결**: [해결 방법]

## 다음 작업 계획
- [다음 작업 1]
- [다음 작업 2]
```

#### 문서화 체크리스트
- [ ] 코드 주석 추가
- [ ] README.md 업데이트
- [ ] Devlog.md 작성
- [ ] todo.md 업데이트

### 5. 배포 단계 (15-30분)

#### 배포 파이프라인
```
개발 → 스테이징 → 프로덕션
  ↓        ↓         ↓
로컬     Vercel    Vercel
테스트   Preview   Production
```

#### 배포 체크리스트
- [ ] 빌드 성공 확인
- [ ] 환경 변수 설정
- [ ] 배포 후 기본 기능 확인
- [ ] 성능 모니터링 설정
- [ ] 롤백 계획 준비

## 🔍 효과적인 프로세스 사례

### 1. 점진적 개발 접근법
- **작은 단위로 작업 분리**
  ```
  검색 페이지 구현 → 헤더 연결 → 사이드바 연결 → 전역 레이아웃
  ```
- **각 단계별 테스트**
  - 변경 후 즉시 `npm run dev`로 확인
  - 문제 발생 시 원인 파악이 쉬움
- **작은 단위의 커밋**
  - 변경 추적 용이
  - 롤백 가능성 확보

### 2. 문서 중심 개발
- **todo.md 활용**
  - 작업 전 계획 수립 및 기록
  - 작업 완료 시 체크 표시
  - 진행 상황 가시화

```markdown
# Todo 목록

## 검색 페이지 구현
- [x] 검색 페이지 기본 구조 생성
- [x] 검색 폼 컴포넌트 개발
- [x] 검색 결과 컴포넌트 개발
- [ ] 검색 필터 기능 구현

## 진행률: 75%
```

- **Devlog.md 작성**
  - 작업 내용, 문제점, 해결 방법 기록
  - 프로세스 개선점 도출
  - 향후 유사 작업 시 참고 자료로 활용

### 3. Git 관리 전략
- **의미 있는 커밋 단위**
  - 기능별 커밋 분리
  - 명확한 커밋 메시지 작성
  - 변경 이력 추적 용이

```
feat: 검색 페이지 기본 구조 구현
feat: 헤더 컴포넌트 전역 레이아웃에 연결
fix: 모바일 화면에서 헤더 메뉴 오버랩 문제 수정
docs: 검색 페이지 개발 관련 문서 업데이트
```

- **작업 완료 후 즉시 푸시**
  - 작업 결과 즉시 원격 저장소에 반영
  - 데이터 손실 위험 감소
  - 협업 시 충돌 가능성 감소

## ⚠️ 개선이 필요한 프로세스

### 1. 테스트 자동화 부족
- **문제점**: 수동 테스트에 의존 (`npm run dev`로 확인)
- **개선 방안**:
  - Jest 테스트 작성 및 자동화
  - CI/CD 파이프라인 구축
  - 테스트 커버리지 측정 도구 도입

```bash
# package.json에 테스트 스크립트 추가
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  }
}
```

### 2. 코드 품질 관리 미흡
- **문제점**: ESLint, Prettier 실행 단계 누락
- **개선 방안**:
  - 커밋 전 코드 품질 검사 자동화 (Husky)
  - 코드 리뷰 체크리스트 작성
  - 정적 분석 도구 활용

```bash
# Husky 설정 예시
npm install husky --save-dev
npx husky install
npx husky add .husky/pre-commit "npm run lint && npm run format"
```

### 3. 작업 시간 추정 부정확
- **문제점**: 작업 소요 시간 예측이 부정확함
- **개선 방안**:
  - 작업별 시간 기록 및 분석
  - 유사 작업 참고하여 추정 정확도 향상
  - 작업 복잡도 평가 기준 수립

```markdown
# 작업 시간 기록 템플릿

| 작업 | 예상 시간 | 실제 소요 시간 | 차이 | 원인 분석 |
|-----|-----|-----|-----|-----|
| 검색 페이지 구현 | 2시간 | 3시간 | +1시간 | 검색 API 연동 문제 |
| 헤더 컴포넌트 연결 | 30분 | 20분 | -10분 | 기존 코드 재사용 |
```

## 🚀 프로세스 개선 제안

### 1. 자동화 도구 도입
- **테스트 자동화**
  - Jest, React Testing Library 활용
  - 컴포넌트 단위 테스트 작성

- **코드 품질 관리 자동화**
  ```json
  // package.json 스크립트 예시
  {
    "scripts": {
      "lint": "eslint --ext .js,.jsx,.ts,.tsx .",
      "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,md}\"",
      "precommit": "npm run lint && npm run format"
    }
  }
  ```

- **문서 자동화**
  - JSDoc 주석 기반 문서 생성
  - 커밋 로그 기반 Devlog 초안 생성 스크립트

### 2. 코드 리뷰 프로세스 개선
- **리뷰 체크리스트 도입**
  - 코드 품질
  - 기능 요구사항 충족
  - 테스트 커버리지
  - 문서화 수준

- **페어 프로그래밍 세션**
  - 복잡한 기능 개발 시 페어 프로그래밍
  - 지식 공유 및 코드 품질 향상
  - 실시간 피드백

### 3. 작업 관리 개선
- **작업 추적 시스템 도입**
  - GitHub Issues 또는 Trello 활용
  - 작업 상태 시각화
  - 병목 현상 조기 발견

- **주간 회고 미팅**
  - 완료된 작업 검토
  - 프로세스 개선점 논의
  - 다음 주 우선순위 설정

## 📝 결론

개발 프로세스는 점진적 접근법과 문서 중심 개발이 효과적임이 입증되었습니다. 작은 단위로 작업을 분리하고 즉시 테스트하는 방식이 문제 발견과 해결에 도움이 되었습니다.

향후 개선 방향은 다음과 같습니다:
1. 테스트 자동화 강화
2. 코드 품질 관리 시스템화
3. 작업 시간 추정 정확도 향상
4. 문서화 프로세스 간소화

**핵심 교훈**: "작게 시작하고, 자주 테스트하고, 꾸준히 문서화하라"

## 📚 참고 자료

- **Git 워크플로우**: [https://www.atlassian.com/git/tutorials/comparing-workflows](mdc:Custom_Devlog_shadun_ui/https:/www.atlassian.com/git/tutorials/comparing-workflows)
- **테스트 주도 개발**: [https://www.agilealliance.org/glossary/tdd/](mdc:Custom_Devlog_shadun_ui/https:/www.agilealliance.org/glossary/tdd)
- **코드 리뷰 가이드**: [https://google.github.io/eng-practices/review/](mdc:Custom_Devlog_shadun_ui/https:/google.github.io/eng-practices/review)
- **CI/CD 파이프라인**: [https://www.redhat.com/en/topics/devops/what-is-ci-cd](mdc:Custom_Devlog_shadun_ui/https:/www.redhat.com/en/topics/devops/what-is-ci-cd)

