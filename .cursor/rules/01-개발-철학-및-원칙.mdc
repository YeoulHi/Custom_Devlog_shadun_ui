---
description: 
globs: 
alwaysApply: true
---
# 개발 철학 및 원칙

## 🎯 핵심 개발 철학

### 점진적 발전 원칙
- **단순에서 복잡으로**: 간단한 구조에서 시작하여 필요에 따라 복잡성 추가
- **MVP 우선**: 최소 기능으로 시작하여 작동하는 제품 확보 후 점진적 개선
- **한 번에 한 가지만**: 작은 단위로 작업을 분리하고 각 단계별 테스트

### 사용자 중심 설계
- **사용자 경험 우선**: 개발자 편의보다 사용자 경험을 최우선으로 고려
- **접근성 보장**: 모든 사용자가 사용할 수 있는 인터페이스 설계
- **직관적 UI/UX**: 복잡한 설명 없이도 사용 가능한 인터페이스

### 품질 중심 개발
- **테스트 주도 개발**: 기능 구현 전 테스트 케이스 작성
- **코드 품질 관리**: 일관된 코딩 스타일과 패턴 적용
- **지속적 리팩토링**: 기술 부채 최소화를 위한 정기적 코드 개선

## 📋 설계 원칙

### 확장 가능한 구조
- **모듈화**: 독립적으로 동작 가능한 작은 단위로 코드 구성
- **관심사 분리**: 각 컴포넌트는 단일 책임만 담당
- **유연한 아키텍처**: 미래 요구사항 변화에 대응 가능한 구조

### 재사용 가능한 컴포넌트
- **DRY 원칙**: 중복 코드 최소화 (Don't Repeat Yourself)
- **일관된 인터페이스**: 유사한 컴포넌트는 유사한 사용법 제공
- **문서화**: 각 컴포넌트의 용도와 사용법 명확히 기록

### 유지보수 용이성
- **가독성**: 명확한 네이밍과 구조로 코드 이해 용이
- **단순성**: 불필요한 복잡성 제거
- **문서화**: 코드 주석과 별도 문서로 의도 명확화

## 🚀 실행 원칙

### 작업 관리
- **작은 단위로 작업 분리**: 큰 작업을 관리 가능한 작은 단위로 분할
- **우선순위 설정**: 가장 중요하고 시급한 작업부터 진행
- **진행 상황 추적**: todo.md 등을 활용한 작업 진행 상황 기록

### 테스트 전략
- **즉시 테스트**: 변경 후 바로 테스트하여 문제 조기 발견
- **자동화 테스트**: 반복적인 테스트는 자동화
- **다양한 환경 테스트**: 여러 디바이스와 브라우저에서 검증

### 문서화 습관
- **코드 주석**: 복잡한 로직에 한국어 주석 추가
- **README 유지**: 프로젝트 개요와 설정 방법 최신 상태 유지
- **변경 이력 기록**: 주요 변경사항과 결정 이유 기록

## 💡 핵심 가치

1. **사용자 중심**: 모든 결정은 최종 사용자 경험 향상에 기여해야 함
2. **품질 우선**: 빠른 개발보다 안정적이고 유지보수 가능한 코드 중시
3. **지속적 학습**: 새로운 기술과 방법론에 열린 자세 유지
4. **협업 중시**: 명확한 커뮤니케이션과 지식 공유 장려
5. **실용주의**: 완벽한 해결책보다 실용적인 접근 방식 선호

## 📝 결론

이 개발 철학과 원칙은 프로젝트의 모든 의사 결정과 작업 방식의 기준이 됩니다. 이를 통해 일관된 방향성을 유지하고, 효율적인 개발 프로세스를 구축하며, 높은 품질의 결과물을 만들어 나갈 수 있습니다.

모든 팀원은 이 원칙을 이해하고 실천하며, 필요에 따라 원칙을 개선하고 발전시켜 나가야 합니다.

**핵심 교훈**: "작게 시작하고, 자주 테스트하고, 꾸준히 문서화하라"

