---
description: 
globs: 
alwaysApply: true
---
# Cursor IDE 개발 지침

## 🚀 미니멀하고 범용적인 개발 프로세스

### 1. 작업 전 계획 수립 및 컨펌
- **작업 범위 명확화**
  ```
  # 작업 계획 템플릿
  1. 목표: [한 문장으로 작업 목표 정의]
  2. 변경 파일: [수정/생성할 파일 목록]
  3. 예상 소요 시간: [시간 추정]
  4. 테스트 방법: [검증 방법 설명]
  ```
- **작은 단위로 분할**
  - 한 번에 하나의 기능 또는 컴포넌트에 집중
  - 복잡한 작업은 여러 단계로 나누어 계획

### 2. 미니멀 개발 접근법
- **점진적 개발**
  1. 최소 기능으로 시작 (MVP 접근법)
  2. 작동하는 코드 확보 후 점진적 개선
  3. 한 번에 한 파일씩 수정하여 문제 발생 시 원인 파악 용이

- **코드 간결성 유지**
  - 필요한 기능만 구현
  - 불필요한 코드와 주석 제거
  - 재사용 가능한 컴포넌트와 유틸리티 활용

### 3. 테스트 주도 개발 (TDD)
- **테스트 우선 작성**
  ```javascript
  // 테스트 먼저 작성
  test('검색 기능이 올바른 결과를 반환해야 함', () => {
    const results = search('테스트');
    expect(results).toContain('테스트 항목');
  });
  
  // 그 다음 기능 구현
  function search(query) {
    // 구현...
  }
  ```

- **테스트 자동화**
  - 단위 테스트: 개별 함수와 컴포넌트
  - 통합 테스트: 여러 컴포넌트 간 상호작용
  - E2E 테스트: 사용자 시나리오 기반

### 4. 자동화 워크플로우
- **개발 완료 후 체크리스트**
  1. 코드 테스트 실행
  2. 문서 자동 업데이트
  3. Git 커밋 및 푸시

- **자동화 스크립트**
  ```bash
  # package.json에 추가할 스크립트
  "scripts": {
    "dev": "next dev",
    "test": "jest",
    "docs": "jsdoc -c jsdoc.json",
    "commit": "npm run test && npm run docs && git add . && git commit"
  }
  ```

### 5. 문제 해결 가이드
- **일반적인 오류와 해결책**
  1. 빌드 캐시 문제: `.next` 디렉토리 삭제 후 재빌드
  2. 컴포넌트 오류: 'use client' 지시문 확인 (클라이언트 컴포넌트)
  3. 타입 오류: 명시적 타입 정의 확인

- **디버깅 프로세스**
  1. 오류 메시지 분석
  2. 최소 재현 케이스 생성
  3. 문제 해결 후 테스트로 검증

## 📋 실용적인 개발 체크리스트

### 작업 시작 전
- [ ] 작업 계획 수립 및 컨펌
- [ ] 필요한 테스트 케이스 정의
- [ ] 기존 코드 스타일 확인

### 개발 중
- [ ] 한 번에 한 가지 변경사항만 구현
- [ ] 변경 후 즉시 테스트
- [ ] 코드 품질 유지 (가독성, 성능)

### 작업 완료 후
- [ ] 모든 테스트 통과 확인
- [ ] 문서 업데이트
- [ ] 의미 있는 커밋 메시지로 변경사항 저장

## 🔄 지속적 개선
- 매 프로젝트 완료 후 프로세스 회고
- 반복되는 문제에 대한 자동화 솔루션 개발

- 팀원 피드백 기반 프로세스 개선